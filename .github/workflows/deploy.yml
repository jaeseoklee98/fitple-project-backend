on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE_TAG_NAME: fitple-project

jobs:
  build-and-docker-push:
    runs-on: ubuntu-20.04 # 실행환경

    # 실행 스텝 지정
    steps:
      - uses: actions/checkout@v3

      # java version 지정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      #      직접 사용
      #      # Docker Image 빌드
      #      - name: Build the Docker image
      #        run: docker build . --file docker/Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
      #
      #      # Docker 로큰
      #      - name: Login to Docker Hub using Access Token
      #        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
      #
      #      # 이미지 푸시
      #      - name: Push the Docker image
      #        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest



  deploy-to-ec2:
    needs: build-and-docker-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            CONTAINER_ID=$(sudo docker ps -q --filter "publish=8080-8080")
            
            if [ ! -z "$CONTAINER_ID" ]; then
              sudo docker stop $CONTAINER_ID
              sudo docker rm $CONTAINER_ID
            fi
            # Docker 이미지 풀
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest
            
            # 컨테이너 실행
            sudo docker run -d -p 8080:8080 \
                -e SPRING_DATASOURCE_URL=jdbc:mysql://${{ secrets.DB_URL }}:3306/fitple_project \
                -e SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }} \
                -e SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }} \
                -e JWT_SECRET=b1ee7f2bb90b78b2274f86936a50c6619fdd96ab9ca837f7902b3f53cc8992ff4b45a58b91cfd1103f85281ea694151d7e83ea0e36d91e022d124223317caf07 \
                -e SERVER_PORT=8080 \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_TAG_NAME }}:latest